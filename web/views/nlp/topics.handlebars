<canvas id="topicsCanvas" height='3000'></canvas>
<script>
  window.addEventListener('load', async () => {
    const canvas = document.getElementById('topicsCanvas').getContext('2d')
    const response = await axios.get('/nlp/successByTopics')
    const rawData = response.data

    // Get the unique list of topics
    const topics = _.uniqBy(_.values(rawData), 'topic').map(r => r.topic)
    topics.sort((s1, s2) => _.toLower(s1) - _.toLower(s2))
    
    const chartData = {
      labels: topics,
      datasets: [
        {
          backgroundColor: topics.map(t => ChartHelper.colorAlexa()),
          borderWidth: 0,
          data: filterByTopics(rawData, 'alexa', topics),
          label: 'Amazon Alexa'
        },
        {
          backgroundColor: topics.map(t => ChartHelper.colorSiri()),
          borderWidth: 0,
          data: filterByTopics(rawData, 'siri', topics),
          label: 'Apple Siri'
        },
        {
          backgroundColor: topics.map(t => ChartHelper.colorGoogle()),
          borderWidth: 0,
          data: filterByTopics(rawData, 'google', topics),
          label: 'Google Assistant'
        }
      ]
    }
    const chartConfiguration = ChartHelper.bar('Success By Topic', chartData)
    _.set(chartConfiguration, 'options.plugins.datalabels.font.size', '10')
    _.set(chartConfiguration, 'options.plugins.datalabels.display', false)
    _.set(chartConfiguration, 'options.responsive', false)
    _.set(chartConfiguration, 'options.scales.yAxes[0].display', true)
    _.set(chartConfiguration, 'options.scales.xAxes[0].ticks.display', false)
    _.set(chartConfiguration, 'options.scales.yAxes[0].ticks.display', true)
    
    _.set(chartConfiguration, 'options.tooltips.callbacks.title', function(tooltipItem, data) {
      const topic = tooltipItem[0].label
      const key = _.keys(rawData).find(key => key.endsWith(topic))
      const topicData = rawData[key]
      const count = topicData.successCount + topicData.failureCount
      
      return count !== 1 ? `${topic} - ${count} Questions` : `${topic} - ${count} Question`
    })
    _.set(chartConfiguration, 'type', 'horizontalBar')
    _.unset(chartConfiguration, 'options.watermark')
    window.successByComplexityChart = new Chart(canvas, chartConfiguration)
  })

  function filterByTopics(resultsForPlatform, platform, topics) {
    return topics.map((topic) => {
      const resultsForTopic = resultsForPlatform[platform + _.upperCase(topic)]
      return _.get(resultsForTopic, 'successPercentage')
    })
  }
</script>
