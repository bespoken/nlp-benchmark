<canvas id="successByTopicsCanvas" ></canvas>
<script>
  window.addEventListener('load', async () => {
    const canvas = document.getElementById('successByTopicsCanvas').getContext('2d')
    const response = await axios.get('/nlp-2023/successByTopics')
    const rawData = response.data
    let topics = ['Geography', 'History', 'Music', 'Movies', 'Politics', 'Sports']
    
    const chartData = {
      labels: topics,
      datasets: [
        {
          backgroundColor: topics.map(t => ChartHelper.colorAlexa()),
          borderWidth: 0,
          data: filterByTopics(rawData, 'alexa', topics),
          label: 'Amazon Alexa'
        },
        {
          backgroundColor: topics.map(t => ChartHelper.colorGoogle()),
          borderWidth: 0,
          data: filterByTopics(rawData, 'google', topics),
          label: 'Google Assistant'
        },
        {
          backgroundColor: topics.map(t => ChartHelper.colorOpenAI()),
          borderWidth: 0,
          data: filterByTopics(rawData, 'openai', topics),
          label: 'OpenAI ChatGPT'
        }
      ]
    }
    const chartConfiguration = ChartHelper.bar('Success By Topic', chartData)
    _.set(chartConfiguration, 'options.plugins.datalabels.font.size', '10')
    //_.set(chartConfiguration, 'options.legend.labels.padding', '30')
    window.successByComplexityChart = new Chart(canvas, chartConfiguration)
  })

  $('#successByTopicsCanvas').click(() => {
    window.location = '/topics'
  })

  function filterByTopics(resultsForPlatform, platform, topics) {
    return topics.map((topic) => {
      const resultsForTopic = resultsForPlatform[platform + _.upperCase(topic)]
      return _.get(resultsForTopic, 'successPercentage')
    })
  }
</script>
